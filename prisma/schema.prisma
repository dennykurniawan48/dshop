// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account{
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  refresh_token_expires_in Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?
  user User @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session{
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id])
}

model User{
  id String @id @default(cuid())
  name String?
  isAdmin Boolean @default(false)
  bio String? @db.Text
  age Int?
  email String? @unique
  password String?
  emailVerified DateTime?
  image String?
  accounts Account[]
  sessions Session[]
  reviews Review[]
  favorites Favorite[]
  orders Order[]
  fcmToken String?
}

model VerificationToken{
  identifier String
  token String @unique
  expires DateTime

  @@unique([identifier, token])
}

model Category{
  id String @id @default(cuid())
  name String
  thumbnail String
  products Product[]
}

model Review{
  id String @id @default(cuid())
  userId String
  productId String
  rating Int
  comment String?
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)
  user User @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Product{
  id String @id @default(cuid())
  name String
  price Float
  categoryId String
  categories Category @relation(fields: [categoryId], references: [id])
  image1 String
  image2 String
  image3 String
  image4 String
  desc String
  averageRating Float?
  availableStock Int
  isActive Boolean @default(false)
  reviews Review[]
  favorites Favorite[]
  detailorder DetailOrder[]
}

model Slider{
  id String @id @default(cuid())
  image String
}

model Favorite{
  id String @id @default(cuid())
  productId String
  userId String
  product Product @relation(fields: [productId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Country{
  id String @id @default(cuid())
  name String
  state State[]
}

model State{
  id String @id @default(cuid())
  name String
  orders Order[]
  countryId String
  country Country @relation(fields: [countryId], references: [id])
}

model Delivery{
  id String @id @default(cuid())
  name String
  duration String
  price Float
  orders Order[]
}

model Order{
  id String @id @default(cuid())
  fullName String @default("")
  address String @default("")
  discount Float @default(0)
  couponCode String? @default("")
  deliveryCost Float @default(0)
  zipCode String @default("")
  total Float @default(0)
  stateId String
  userId String
  statusId String @default("payment")
  deliveryId String
  paid Boolean @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)
  user User @relation(fields: [userId], references: [id])
  state State @relation(fields: [stateId], references: [id])
  delivery Delivery @relation(fields: [deliveryId], references: [id])
  status StatusPayment @relation(fields: [statusId], references: [id])
  detailorder DetailOrder[]
}

model DetailOrder{
  id String @id @default(cuid())
  orderId String
  productId String
  qty Int
  price Float
  addReview Boolean @default(false)
  order Order @relation(fields: [orderId], references: [id])
  products Product @relation(fields: [productId], references: [id])
}

model StatusPayment{
  id String @id @default(cuid())
  status_name String 
  order Order[]
}